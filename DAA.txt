SELECTION SORT
#include<stdio.h>
#include<stdio.h>
void selection_sort(int a[],int n)
{
	int i,j,m,temp,cnt=0;
	for(i=0;i<n-1;i++)
	{
		m=i;
		for(j=i+1;j<n;j++)
		{
			if(a[j]<a[m])
			m=j;
			cnt++;
		}
		temp=a[i];
		a[i]=a[m];
		a[m]=temp;
	}
	printf("the sorted arrays are:\n");
	for(i=0;i<n;i++)
	printf("%d\t",a[i]);
	printf("the num of times basic operaion is %d",cnt);
}
int main()
{
	int n,i;
	int *a;
	printf("the n value\n");
	scanf("%d",&n);
	a=(int*)calloc(n, sizeof(int));
	printf("enter the array values\n");
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	selection_sort(a,n);
	return;
}


MERGE SORT
#include<stdio.h>
int count=0;
void merge(int a[],int low,int mid,int high)
{
	int i=low,j=mid+1,k=0,c[high-low+1];
	while((i<=mid)&&(j<=high))
	{
		count++;
		if(a[i]<a[j])
		  c[k++]=a[i++];
		else
		  c[k++]=a[j++];
	}
	while(i<=mid)
	     c[k++]=a[i++];
	while(j<=high)
	     c[k++]=a[j++];
	for(i=low,j=0;j<k;i++,j++)
	     a[i]=c[j];
}
void merge(int a[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		merge(a,low,mid);
		merge(a,mid+1,high);
		merge(a,low,mid,high);
	}
}
int main()
{
	int n,a[20],i;
	printf("enter the number of elements\n");
	scanf("%d",&n);
	printf("input numbers\n");
	for(i=0;i<n;i++)
	   scanf("%d",&a[i]);
	merge(a,0,n-1);
	printf("sorted numbers are:\n");
	for(i=0;i<n;i++)
	    printf("%d\t",a[i]);
	printf("num of basic operations are %d",count);
	
}


KRUSKAL
#include<stdio.h>
void kruskal(int cost[5][5],int n)
{
	int par[n];
	int a=0,b=0,u=0,v=0,min,i,j,mincost=0,ne=1;
	for(i=0;i<n;i++)
	   par[i]=-1;
	printf("\n the min spanning tree edges are");
	while(ne<=n-1)
	{
		min=999;
		for(i=0;i<n;i++)
		   for(j=0;j<n;j++)
		      if(cost[i][j]<n)
		      {
		      	min=cost[i][j];
		      	a=u=i;
		      	b=v=j;
			  }
			  while(par[u]!=-1)
			       u=par[u];
			  while(par[v]!=-1)
			       v=par[v];
			  if(u!=v)
			  {
			  	printf("from vertex %d to vertex %d the cost is =%d\n",a,b,min);
			  	mincost=min;
			  	if(par[b]==-1)
			  	  par[b]=a;
			  	  else
			  	  par[a]=b;
			  	ne++;
			  }
			  cost[a][b]=cost[b][a]=999;
	}
	printf("cost of MST =%d",mincost);
}
int main()
{
	int n,c[5][5],i,j;
	printf("\n enter the number of vertices");
	scanf("%d",&n);
	printf("enter the adjacency matrix");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&c[i][j]);
			if(c[i][j]==0)
			  c[i][j]=999;
		}
	}
	kruskal(c,5);
}


KNAPSACK
#include<stdio.h>

void knapsack(int n, float weight[], float profit[], float capacity) {
    float x[20], tp = 0;
    int i, j, u;
    u = capacity;
    
    for (i = 0; i < n; i++) {
        x[i] = 0.0;
        if (weight[i] > u)
            break;
        else 
		{
            x[i] = 1.0;
            tp = tp + profit[i];
            u = u - weight[i];
        }
    }
    
    if (i < n)
        x[i] = u / weight[i];
    tp = tp + (x[i] * profit[i]);
    
    printf("\nThe result vector is:\n");
    for (i = 0; i < n; i++)
        printf("%2f\t", x[i]);
    printf("\nMaximum profit is: %f", tp);
}

int main() {
    float weight[20], profit[20], capacity;
    int num, i, j;
    float ratio[20], temp;
    
    printf("\nEnter the number of objects: ");
    scanf("%d", &num);
    
    printf("\nEnter the capacity of the knapsack: ");
    scanf("%f", &capacity);
    
    printf("\nEnter the weights and profits of each object:\n");
    for (i = 0; i < num; i++)
        scanf("%f %f", &weight[i], &profit[i]);
    
    for (i = 0; i < num; i++)
        ratio[i] = profit[i] / weight[i];
    
    
    for (i = 0; i < num; i++) {
        for (j = i + 1; j < num; j++) {
            if (ratio[i] < ratio[j]) 
			{
                temp = ratio[j];
                ratio[j] = ratio[i];
                ratio[i] = temp;

                temp = weight[j];
                weight[j] = weight[i];
                weight[i] = temp;

                temp = profit[j];
                profit[j] = profit[i];
                profit[i] = temp;
            }
        }
    }
    
    knapsack(num, weight, profit, capacity); 
    
    return 0;
}


PRIMS
#include <stdio.h>

int a, b, u, v, n, i, j, ne = 1;
int visited[10] = {0}, min, mincost = 0, cost[10][10];

int main() {
    printf("\n Enter the number of nodes: ");
    scanf("%d", &n);
    
    printf("\n Enter the adjacency matrix:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }
    
    visited[1] = 1;
    printf("\n");
    
    while (ne < n) {
        for (i = 1, min = 999; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (cost[i][j] < min && visited[i] != 0) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }
        
        if (visited[u] == 0 || visited[v] == 0) {
            printf("\n %d: %d --> %d cost: %d", ne++, u, v, min);
            mincost += min;
            visited[v] = 1;
        }
        
        cost[u][v] = cost[v][u] = 999;
    }
    
    printf("\n Minimum cost = %d", mincost);
}

FLOYDS
#include <stdio.h>
#include <limits.h> 

int min(int a, int b) {
    return (a < b) ? a : b;
}

void floyd(int d[10][10], int n) {
    int i, j, k;
    for (k = 1; k <= n; k++)
        for (i = 1; i <= n; i++)
            for (j = 1; j <= n; j++)
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
}

int main() {
    int n, i, j, cost[10][10];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("\nEnter the cost matrix:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &cost[i][j]);

    floyd(cost, n);

    printf("\nAll pair shortest path:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            if (cost[i][j] == INT_MAX)
                printf("INF ");
            else
                printf("%d ", cost[i][j]);
        }
        printf("\n");
    }

    return 0; 
}

DIJKSTRA
#include <stdio.h>
#include <stdlib.h>

void dijstras(int n, int cost[10][10], int s, int dist[10]);

int main() {
    int i, j, n, s, cost[10][10], dist[10];
    printf("Enter the number of nodes: \n");
    scanf("%d", &n);
    printf("Read cost matrix:\n");
    
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0) {
                cost[i][j] = 1000;
            }
        }
    }
    
    printf("\nRead source vertex: ");
    scanf("%d", &s);
    dijstras(n, cost, s, dist);
    printf("\nThe shortest path from %d is\n", s);
    
    for (i = 1; i <= n; i++) {
        if (s != i) {
            printf("%d --> %d = %d\n", s, i, dist[i]);
        }
    }
    
    return 0;
}

void dijstras(int n, int cost[10][10], int s, int dist[10]) {
    int i, v, count = 1, min, visited[10];
    for (i = 1; i <= n; i++) {
        visited[i] = 0;
        dist[i] = cost[s][i];
    }
    
    visited[s] = 1;
    dist[s] = 0;
    
    while (count <= n) {
        min = 1000;
        for (i = 1; i <= n; i++) {
            if (dist[i] < min && visited[i] == 0) {
                min = dist[i];
                v = i;
            }
        }
        
        visited[v] = 1;
        count++;
        
        for (i = 1; i <= n; i++) {
            if (dist[i] > dist[v] + cost[v][i]) {
                dist[i] = dist[v] + cost[v][i];
            }
        }
    }
}